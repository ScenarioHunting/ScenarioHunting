"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkExternalServices"] = self["webpackChunkExternalServices"] || []).push([["default-src_external-services_tsx"],{

/***/ "./src/adopters/miro/miro-board.ts":
/*!*****************************************!*\
  !*** ./src/adopters/miro/miro-board.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MiroBoard = void 0;\n/* eslint-disable no-undef */\nconst board_text_schema_extractor_1 = __webpack_require__(/*! ../../app/scenario-builder/board-text-schema-extractor */ \"./src/app/scenario-builder/board-text-schema-extractor.ts\");\nconst external_services_1 = __webpack_require__(/*! ../../external-services */ \"./src/external-services.tsx\");\nconst ON_SELECTION = 'selection:update';\nclass MiroBoard {\n    getModalParameters() {\n        return miro.board.ui.getModalData();\n    }\n    openModal(options) {\n        return miro.board.ui.openModal({ fullscreen: true, data: options.parameters, url: options.url });\n    }\n    closeModal() { return miro.board.ui.closeModal(); }\n    previousHandler;\n    onNextOneSelection(succeed) {\n        const handle = async (selected) => {\n            var widgets = selected.items;\n            if (widgets.length == 0)\n                return;\n            if (widgets.length > 1) {\n                external_services_1.log.log(`${widgets.length} items are selected. Only a single one can be selected.`);\n                return;\n            }\n            try {\n                await miro.board.events.off(ON_SELECTION, handle);\n                const selectedStep = await extractStepFrom(widgets[0]);\n                succeed(selectedStep);\n            }\n            catch (e) {\n                external_services_1.log.log(e);\n            }\n        };\n        if (this.previousHandler)\n            miro.board.ui.off(ON_SELECTION, this.previousHandler);\n        this.previousHandler = handle;\n        return miro.board.ui.on(ON_SELECTION, handle);\n    }\n    unselectAll = async () => {\n        await miro.board.deselect();\n    };\n    showNotification = (message) => miro.board.notifications.showInfo(message);\n    zoomTo = async (widget) => miro.board.viewport.zoomTo(await miro.board.get({ id: widget.id }));\n}\nexports.MiroBoard = MiroBoard;\nfunction getWidgetStyle(widget) {\n    const style = {};\n    if (('style' in widget || 'fillColor' in widget['style']) == false)\n        return style;\n    style.backgroundColor = mapColor(widget['style']['fillColor']);\n    if (widget['style']['fillColor'] == 'back')\n        style.color = mapColor('gray');\n    return style;\n}\nconst mapColor = (fillColor) => ({\n    'gray': 'rgb(245, 246, 248)',\n    'light_yellow': 'rgb(255, 249, 177)',\n    'yellow': 'rgb(245, 209, 40)',\n    'orange': 'rgb(255, 157, 72)',\n    'light_green': 'rgb(213, 246, 146)',\n    'green': 'rgb(201, 223, 86)',\n    'dark_green': 'rgb(147, 210, 117)',\n    'cyan': 'rgb(103, 198, 192)',\n    'light_pink': 'rgb(255, 206, 224)',\n    'pink': 'rgb(234, 148, 187)',\n    'violet': 'rgb(198, 162, 210)',\n    'red': 'rgb(240, 147, 157)',\n    'light_blue': 'rgb(166, 204, 245)',\n    'blue': 'rgb(108, 216, 250)',\n    'dark_blue': 'rgb(158, 169, 255)',\n    'black': 'rgb(0, 0, 0)',\n}[fillColor] ?? fillColor);\nconst getPlainText = (originalText) => originalText.split('</p><p>').join('\\n')\n    .replace('&#43;', '+')\n    .replace(/(<([^>]+)>)/ig, '');\nasync function extractStepFrom(widget) {\n    try {\n        let text = getPlainText(await extractWidgetText(widget));\n        const step = {\n            widgetSnapshot: {\n                id: widget.id,\n                style: getWidgetStyle(widget)\n            },\n            step: await (0, board_text_schema_extractor_1.extractStepFromText)({\n                schemaText: text,\n                exampleText: text\n            })\n        };\n        return step;\n    }\n    catch (e) {\n        external_services_1.log.error(e);\n        return Promise.reject(e);\n    }\n}\nfunction extractWidgetText(widget) {\n    if (!widget)\n        return Promise.reject('Cannot get the widget text. The widget is undefined.');\n    if ('content' in widget)\n        return Promise.resolve(widget.content);\n    if ('title' in widget)\n        return Promise.resolve(widget.title);\n    return Promise.reject(`The widget ${JSON.stringify(widget)} does not have any text`);\n}\n\n\n//# sourceURL=webpack://ExternalServices/./src/adopters/miro/miro-board.ts?");

/***/ }),

/***/ "./src/adopters/miro/miro-template-repository.ts":
/*!*******************************************************!*\
  !*** ./src/adopters/miro/miro-template-repository.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.miroTemplateRepository = void 0;\nconst external_services_1 = __webpack_require__(/*! ../../external-services */ \"./src/external-services.tsx\");\nconst keyPrefix = 'template-';\nconst keyFor = templateName => keyPrefix + templateName;\nclass miroTemplateRepository {\n    async getAllTemplateNames() {\n        return Object.keys(await miro.board.getAppData())\n            .filter(k => k.startsWith(keyPrefix))\n            .map(k => k.slice(keyPrefix.length));\n    }\n    removeTemplate(templateName) {\n        return miro.board.setAppData(keyFor(templateName), undefined);\n    }\n    createOrReplaceTemplate(template) {\n        external_services_1.log.log('Saving template:', template);\n        return miro.board.setAppData(keyFor(template.templateName), template);\n    }\n    async getTemplateByName(templateName) {\n        return await miro.board.getAppData(keyFor(templateName));\n    }\n}\nexports.miroTemplateRepository = miroTemplateRepository;\n\n\n//# sourceURL=webpack://ExternalServices/./src/adopters/miro/miro-template-repository.ts?");

/***/ }),

/***/ "./src/adopters/mocks/board-mock.tsx":
/*!*******************************************!*\
  !*** ./src/adopters/mocks/board-mock.tsx ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoardUi = exports.UIComponent = exports.MockBoard = void 0;\nconst React = __importStar(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nclass BoardMock {\n    getModalParameters() {\n        throw new Error('Method not implemented.');\n    }\n    getWidgetText = function (widgetId) {\n        this.showStatus('Returning widget text for widget id:\\n' + widgetId);\n        return Promise.resolve('Widget Id');\n    };\n    select = () => { };\n    showStatus = () => { };\n    onNextOneSelection = function (callback) {\n        this.select = callback;\n    };\n    unselectAll = () => Promise.resolve(this.showStatus('All widgets are unselected.'));\n    showNotification = (message) => Promise.resolve(this.showStatus('Notification message:\\n' + message));\n    openModal({ url, parameters: data }) {\n        const modal = document.getElementById('modal');\n        const modalDarkBackground = document.getElementById('modal-dark-background');\n        modalDarkBackground.style.display = 'block';\n        modal.style.display = 'block';\n        document.getElementById('modal-iframe').src = url;\n        modalDarkBackground.onclick = function () {\n            modal.style.display = 'none';\n            modalDarkBackground.style.display = 'none';\n        };\n        window.onkeydown = function (e) {\n            if (e.keyCode == 27) {\n                if (document && document.getElementById('modal')) {\n                    document.getElementById('modal').style.display = 'none';\n                    document.getElementById('modal-dark-background').style.display = 'none';\n                    return;\n                }\n                window.parent.document.getElementById('modal').style.display = 'none';\n                window.parent.document.getElementById('modal-dark-background').style.display = 'none';\n                // this.closeModal()\n                e.preventDefault();\n                return;\n            }\n        };\n        const x = { waitForClose: () => { return Promise.reject(); } };\n        return Promise.resolve(x);\n    }\n    closeModal() {\n        if (document && document.getElementById('modal')) {\n            document.getElementById('modal').style.display = 'none';\n            document.getElementById('modal-dark-background').style.display = 'none';\n            return;\n        }\n        window.parent.document.getElementById('modal').style.display = 'none';\n        window.parent.document.getElementById('modal-dark-background').style.display = 'none';\n    }\n    zoomTo = (widget) => this.showStatus('Zooming to:\\n' + widget.id);\n}\nconst board = new BoardMock();\nfunction MockBoard() {\n    return board;\n}\nexports.MockBoard = MockBoard;\nfunction UIComponent() {\n    const [statusMessage, setStatusMessage] = React.useState('status');\n    board.showStatus = message => setStatusMessage(message);\n    const [step, changeStep] = React.useState(JSON.stringify({\n        // example: {\n        //     customer_id: \"customerId\",\n        //     newAddress: \"Oak street\",\n        //     number_sample: 23,\n        //     bool_sample: false,\n        //     tuple_sample: [\n        //         \"str\",\n        //         12\n        //     ],\n        //     array_sample: [\n        //         \"1st item\",\n        //         \"2nd item\"\n        //     ],\n        //     NewPhone_number: \"+44555112100\"\n        // },\n        step: {\n            title: 'Customer registered',\n            schema: {\n                type: 'object',\n                properties: {\n                    customer_id: {\n                        type: 'string',\n                        description: 'customer_id',\n                        example: 'customerId'\n                    },\n                    newAddress: {\n                        type: 'string',\n                        description: 'new address',\n                        example: 'Oak street'\n                    },\n                    number_sample: {\n                        type: 'number',\n                        description: 'num sample',\n                        example: 23\n                    },\n                    bool_sample: {\n                        type: 'boolean',\n                        description: 'boolean sample',\n                        example: false\n                    },\n                    array_sample: {\n                        type: 'array',\n                        description: 'array_sample',\n                        items: {\n                            type: 'string',\n                            description: '1st item',\n                            example: '1st item'\n                        }\n                    },\n                    tuple_sample: {\n                        type: 'array',\n                        description: 'array_sample',\n                        items: [\n                            {\n                                type: 'string',\n                                description: '1st item',\n                                example: '1st item'\n                            },\n                            {\n                                type: 'number',\n                                description: '2nd item',\n                                example: '2nd item'\n                            }\n                        ]\n                    },\n                    NewPhone_number: {\n                        type: 'string',\n                        description: 'New phonenumber',\n                        example: '+44555112100'\n                    }\n                }\n            },\n            example: {\n                customer_id: 'customerId',\n                newAddress: 'Oak street',\n                number_sample: 23,\n                bool_sample: false,\n                tuple_sample: [\n                    'str',\n                    12\n                ],\n                array_sample: [\n                    '1st item',\n                    '2nd item'\n                ],\n                NewPhone_number: '+44555112100'\n            },\n        },\n        widgetSnapshot: {\n            id: '3074457354846911652',\n            style: {\n                backgroundColor: '#ff9d48'\n            }\n        },\n    }, null, 2));\n    function select() {\n        if (!step) {\n            alert('No selection!');\n            return;\n        }\n        const selected = JSON.parse(step);\n        if (!selected) {\n            alert('Invalid format.');\n            return;\n        }\n        board.select(selected);\n    }\n    return React.createElement(\"div\", { style: {\n            width: '100%',\n            backgroundColor: '#454545',\n            marginLeft: '10px'\n        } },\n        React.createElement(\"h4\", { style: {\n                backgroundColor: 'white',\n                textAlign: 'center',\n                margin: '0px'\n            } }, \"Widget Data To Be Selected\"),\n        React.createElement(\"textarea\", { style: {\n                width: '100%',\n                height: '512px',\n                backgroundColor: '#454545',\n                color: '#ffffffd9',\n                borderStyle: 'none'\n            }, onChange: x => changeStep(x.target.value), value: step }),\n        React.createElement(\"button\", { style: { width: '100%', height: '36px' }, onClick: select }, \"Select\"),\n        React.createElement(\"pre\", { style: {\n                backgroundColor: '#4262ff',\n                color: 'white',\n                marginBottom: 'auto',\n                margin: '0px'\n            } }, statusMessage),\n        React.createElement(\"div\", { id: \"modal\", style: {\n                display: 'none',\n                position: 'fixed',\n                top: '0%',\n                left: '0%',\n                width: '100%',\n                height: '100%',\n                zIndex: 10\n            } },\n            React.createElement(\"iframe\", { id: \"modal-iframe\", style: {\n                    width: '100%',\n                    height: '100%',\n                    border: 0\n                } })),\n        React.createElement(\"div\", { id: \"modal-dark-background\", style: {\n                position: 'fixed',\n                zIndex: 5,\n                left: 0,\n                top: 0,\n                width: '100%',\n                height: '100%',\n                overflow: 'hidden',\n                backgroundColor: 'rgba(0,0,0,.75)',\n                display: 'none'\n            } }));\n}\nexports.UIComponent = UIComponent;\nclass BoardUi {\n    component = UIComponent;\n}\nexports.BoardUi = BoardUi;\n\n\n//# sourceURL=webpack://ExternalServices/./src/adopters/mocks/board-mock.tsx?");

/***/ }),

/***/ "./src/adopters/mocks/local-storage-template-repository.ts":
/*!*****************************************************************!*\
  !*** ./src/adopters/mocks/local-storage-template-repository.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.localStorageTemplateRepository = void 0;\nconst external_services_1 = __webpack_require__(/*! ../../external-services */ \"./src/external-services.tsx\");\nconst KeyPrefix = 'TemplateRepository-';\nclass localStorageTemplateRepository {\n    async createOrReplaceTemplate(newTemplate) {\n        external_services_1.log.log('Saving template to local storage:', newTemplate);\n        if (newTemplate.templateName)\n            this.removeTemplate(newTemplate.templateName);\n        localStorage.setItem(KeyPrefix + newTemplate.templateName, JSON.stringify(newTemplate));\n    }\n    getAllTemplateNames() {\n        return Promise.resolve(Object.keys(localStorage).map(t => t.substr(KeyPrefix.length)));\n    }\n    removeTemplate(templateName) {\n        return Promise.resolve(localStorage.removeItem(KeyPrefix + templateName));\n    }\n    getTemplateByName(templateName) {\n        const item = localStorage.getItem(KeyPrefix + templateName);\n        if (!item)\n            return Promise.resolve(undefined);\n        return Promise.resolve(JSON.parse(item));\n    }\n    dumpAll = async () => (await this.getAllTemplateNames())\n        .forEach(t => this.getTemplateByName(t).then(external_services_1.log.log));\n}\nexports.localStorageTemplateRepository = localStorageTemplateRepository;\n\n\n//# sourceURL=webpack://ExternalServices/./src/adopters/mocks/local-storage-template-repository.ts?");

/***/ }),

/***/ "./src/app/api-factory.ts":
/*!********************************!*\
  !*** ./src/app/api-factory.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createSingularProperty = void 0;\nfunction createSingularProperty(description, example) {\n    if (Number.isInteger(example)) {\n        return {\n            type: 'integer',\n            description: description,\n            example: parseFloat(example)\n        };\n    }\n    if (!isNaN(parseFloat(example))) {\n        return {\n            type: 'number',\n            description: description,\n            example: parseFloat(example)\n        };\n    }\n    if (['true', 'false'].includes(example.toLowerCase())) {\n        return {\n            type: 'boolean',\n            description: description,\n            example: example.toLowerCase() == 'true'\n        };\n    }\n    if (['null', 'nil'].includes(example.toLowerCase())) {\n        return {\n            type: 'null',\n            description: description,\n        };\n    }\n    return {\n        type: 'string',\n        description: description,\n        example: example\n    };\n}\nexports.createSingularProperty = createSingularProperty;\n\n\n//# sourceURL=webpack://ExternalServices/./src/app/api-factory.ts?");

/***/ }),

/***/ "./src/app/scenario-builder/board-text-schema-extractor.ts":
/*!*****************************************************************!*\
  !*** ./src/app/scenario-builder/board-text-schema-extractor.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extractStepFromText = void 0;\nconst api_factory_1 = __webpack_require__(/*! ../../app/api-factory */ \"./src/app/api-factory.ts\");\nconst external_services_1 = __webpack_require__(/*! ../../external-services */ \"./src/external-services.tsx\");\nconst removeStartingDash = (str) => str[0] == '-' ? str.substring(1) : str;\n// function areAllItemsTheSame(array: any[]) {\n//     return new Set(array).size == 1\n// }\nasync function extractStepFromText({ schemaText, exampleText: exampleText }) {\n    let title = schemaText.trim().split('\\n')[0];\n    if (!title) {\n        return Promise.reject('Unknown text format.');\n    }\n    let result = {\n        title: title,\n        schema: {\n            type: 'object',\n            properties: {},\n        },\n        example: {}\n    };\n    const rows = exampleText.trim().split(/\\n|;|,|\\//);\n    if (rows[0] == title) {\n        rows.shift();\n    }\n    // title = snakeCase(title!).trim()\n    // var props: Properties = {}\n    //\n    let isInArrayScope = false; //Pass it as a recursive parameter\n    let parentArrayPropertyName = ''; //Pass it as a recursive parameter\n    //^Refactor to a stack\n    rows.map(row => row.split(':'))\n        .forEach(kv => {\n        let propertyName = removeStartingDash(kv[0].trim())?.trim();\n        if (propertyName == '')\n            return;\n        let propertyValue = kv[1]?.trim();\n        if (!propertyValue) {\n            propertyValue = propertyName;\n        }\n        if (isInArrayScope) {\n            if (propertyValue.endsWith(']')) {\n                propertyValue = propertyValue.slice(0, -1);\n                isInArrayScope = false;\n                propertyName = propertyName.slice(0, -1);\n            }\n            // result.data[propertyName] = propertyValue;\n            if (!Array.isArray(result.example[parentArrayPropertyName]))\n                result.example[parentArrayPropertyName] = [];\n            result.example[parentArrayPropertyName].push(propertyValue);\n            const s = (0, api_factory_1.createSingularProperty)(propertyName, propertyValue);\n            let items = result.schema.properties[parentArrayPropertyName].items;\n            if (!items)\n                items = s;\n            else if (Array.isArray(items))\n                items.push(s);\n            else if (items != s)\n                items = [items, s];\n            result.schema.properties[parentArrayPropertyName].items = items;\n            external_services_1.log.log(propertyName + ' The property: ' + parentArrayPropertyName + ' schema set to: '\n                + propertyValue + '=> result:', result.schema.properties[parentArrayPropertyName].items);\n            external_services_1.log.log('The property: ' + parentArrayPropertyName + ' data set to: ' + propertyValue + '=> result:', result.example[parentArrayPropertyName]);\n            return;\n        }\n        if (propertyValue[0].startsWith('[')) {\n            isInArrayScope = true;\n            const property = {\n                type: 'array',\n                description: propertyName,\n                items: [],\n            };\n            const firstItemsPropertyName = propertyValue.substring(1);\n            const s = (0, api_factory_1.createSingularProperty)(firstItemsPropertyName, firstItemsPropertyName);\n            // property.items = s;\n            result.schema.properties[propertyName] = property;\n            result.example[propertyName] = {};\n            result.example[propertyName][firstItemsPropertyName] = [s.example];\n            parentArrayPropertyName = propertyName;\n            return;\n        }\n        result.example[propertyName] = propertyValue;\n        const s = (0, api_factory_1.createSingularProperty)(propertyName, propertyValue);\n        result.schema.properties[propertyName] = s;\n    });\n    return Promise.resolve(result);\n}\nexports.extractStepFromText = extractStepFromText;\n\n\n//# sourceURL=webpack://ExternalServices/./src/app/scenario-builder/board-text-schema-extractor.ts?");

/***/ }),

/***/ "./src/app/template-processing/builtin-templates.js":
/*!**********************************************************!*\
  !*** ./src/app/template-processing/builtin-templates.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.builtinTemplates = void 0;\nexports.builtinTemplates = [\n    {\n        templateName: 'new',\n        contentTemplate: '{{{yaml .}}}',\n        fileExtension: 'yml',\n        fileNameTemplate: '{{snakeCase scenario.title}}',\n    },\n    {\n        templateName: 'cs-aggregate-gwt',\n        fileNameTemplate: '{{pascalCase scenario.title}}',\n        fileExtension: 'cs',\n        contentTemplate: `using {{pascalCase context.title}};\nusing Xunit;\n\nnamespace {{pascalCase context.title}}.Tests\n{\n {{#* inline \"callConstructor\"}}\nnew {{pascalCase title}}({{#each schema.properties}}\"{{this.example}}\"{{#unless @last}},{{/unless}}{{/each}}){{/inline}}    public class {{pascalCase scenario.title}}\n    {\n        public IDomainEvent[] Given\n        => new IDomainEvent[]{\n    {{#each given}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n\n        public ICommand When\n        => {{> callConstructor when}};\n\n        public IDomainEvent[] Then\n        => new IDomainEvent[]{\n    {{#each then}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n\n        public object Subject { get; } = new { Title = nameof({{pascalCase subject.title}}) };\n\n        [Fact]\n        public void Run()\n        {\n            //The \"Run\" function can be abstracted away.\n\n            var dbSpy = new dbSpy();\n            var cmdHandler = new {{pascalCase subject.title}}CommandHandler(new {{pascalCase subject.title}}Repository(dbSpy));\n\n            Given.ForEach(cmdHandler.Handle);\n            cmdHandler.Handle(When);\n            Then.ForEach(then => dbSpy.Events.Should().ContainEquivalentOf(then));\n        }\n    }\n}\n\n`\n    },\n    {\n        templateName: 'cs-aggregate',\n        fileNameTemplate: '{{pascalCase scenario.title}}',\n        fileExtension: 'cs',\n        contentTemplate: `{{> main}}\n{{#*inline 'main'}}\nusing Xunit;\nusing FluentAssertions;\nusing {{pascalCase context.title}};\n\nnamespace {{pascalCase context.title}}\n{\n    public class {{pascalCase scenario.title}}Spec\n    {\n        [Fact]\n        public void {{pascalCase scenario.title}}()\n        {\n            //Given\n            {{#if given}}\n            {{pascalCase @root.subject.title}} {{camelCase @root.subject.title}} = {{pascalCase @root.subject.title}}.CreateFromHistory(new IDomainEvent[]{\n                {{#each given as |step|}}\n            {{>format schema=step.schema }},\n                {{/each}} });\n            {{/if}} \n            \n        \n            //When\n            {{#if given}}\n            {{camelCase @root.subject.title}}{{else}}\n            {{pascalCase @root.subject.title}} {{camelCase @root.subject.title}} = {{pascalCase @root.subject.title}}{{/if}}.{{>object schema=when.schema title=when.title}};\n           \n            //Then\n            {{#each then as |step|}}\n            {{camelCase  @root.subject.title}}.Events.Should().ContainEquivalentOf(\n                {{>format schema=step.schema }}\n);\n            {{/each}}\n        }\n    }\n}\n{{/inline}}\n\n{{#*inline \"format\" schema}}\n{{>(concat 'format_' schema.type) schema=schema}}\n{{/inline}}\n\n{{#*inline \"format_string\" schema}}\"{{schema.example}}\"{{/inline}}\n{{#*inline \"format_number\" schema}}{{schema.example}}{{/inline}}\n{{#*inline \"format_boolean\" schema}}{{schema.example}}{{/inline}}\n{{#*inline \"format_object\"  schema}}new {{>object schema=schema title=title}}{{/inline}}\n\n{{#*inline \"format_array\" schema }}\n         {{#if schema.items.[0]}}\nnew[]{ {{#each schema.items as |value key|}}\n                                {{>format schema=value }}{{#unless @last}},{{/unless}}{{/each}}\n                            }{{else}}{{>format  schema=schema.items }}{{/if}}{{/inline}}\n\n{{#*inline \"object\" schema title}}{{pascalCase title}}(\n    {{!-- TODO: It should be title of object not scenario's --}}\n    {{#each schema.properties as |value key|}}\n                        {{camelCase key}}: {{> format schema=value }}{{#unless @last}},{{/unless}}\n{{/each}}\n            ){{/inline}}\n\n{{#*inline \"format_undefined\" schema}}\nSTRUCTURAL ERROR: UNKNOWN SCHEMA TYPE:\nThe field 'type' is not found in the schema\n---------INTERNAL-SCHEMA:--------------------\n{{{yaml schema}}}\n------------THIS:--------------------\n{{{yaml .}}}\n{{/inline}}\n\n`\n    },\n    {\n        templateName: 'gherkin-scenario',\n        fileNameTemplate: '{{kebabCase scenario.title}}',\n        fileExtension: 'feature',\n        contentTemplate: `Scenario Outline: {{sentenceCase scenario.title}}\nGiven {{#each given as |step index|}}{{spaceCase step.title}} {{>table object=step.schema}}\n{{#unless @last}} And {{/unless}}{{/each}}When {{#with when as |step|}} {{spaceCase step.title}} {{>table object=step.schema}}\n{{/with}}\nThen {{#each then as |step|}} {{spaceCase step.title}} {{>table object=step.schema}}\n{{#unless @last}} And {{/unless}}{{/each}}\n\n{{#*inline 'table' object}}{{#each object.properties as |property title|}}\n        {{>row title=title  value=property.example}}{{/each}}{{/inline}}\n\n{{#*inline 'row' title value}}\n| {{>column (spaceCase title)}} | {{>column value}} |{{/inline}}\n\n{{#*inline 'column'}}\n{{.}} {{>fill_rest}}{{/inline}}\n\n{{#*inline 'fill_rest'}}\n{{repeat ' ' (subtract 15 (lookup (lowerCase .) 'length'))}}{{/inline}}\n`\n    },\n];\n\n\n//# sourceURL=webpack://ExternalServices/./src/app/template-processing/builtin-templates.js?");

/***/ }),

/***/ "./src/app/template-processing/default-template-repository-decorator.ts":
/*!******************************************************************************!*\
  !*** ./src/app/template-processing/default-template-repository-decorator.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decorateRepositoryWithTemplates = void 0;\nconst builtin_templates_1 = __webpack_require__(/*! ./builtin-templates */ \"./src/app/template-processing/builtin-templates.js\");\nclass DefaultTemplateRepositoryDecorator {\n    customTemplateRepository;\n    builtinTemplateRepository;\n    // eslint-disable-next-line no-unused-vars\n    constructor(customTemplateRepository\n    // eslint-disable-next-line no-unused-vars\n    , builtinTemplateRepository) {\n        this.customTemplateRepository = customTemplateRepository;\n        this.builtinTemplateRepository = builtinTemplateRepository;\n    }\n    async createOrReplaceTemplate(template) {\n        // if(this.builtinTemplateRepository.find())\n        if (template.templateName.trim() == '')\n            throw Error('Template name is required!');\n        if (template.contentTemplate.trim() == '')\n            throw Error('Template content is required!');\n        if (template.fileExtension.trim() == '')\n            throw Error('Template\\'s target file extension template is required!');\n        if (template.fileNameTemplate.trim() == '')\n            throw Error('Template\\'s target file name template is required!');\n        return this.customTemplateRepository.createOrReplaceTemplate(template);\n    }\n    async getAllTemplateNames() {\n        const userCustomTemplateNames = await this.customTemplateRepository.getAllTemplateNames();\n        const builtinTemplateNames = this.builtinTemplateRepository.map(t => t.templateName);\n        return userCustomTemplateNames\n            .concat(builtinTemplateNames)\n            .filter((template, index, all) => //unique (last occurance)\n         all.indexOf(template) === index);\n    }\n    removeTemplate(templateName) {\n        return this.customTemplateRepository.removeTemplate(templateName);\n    }\n    async getTemplateByName(templateName) {\n        let template = await this.customTemplateRepository.getTemplateByName(templateName);\n        if (!template)\n            template = builtin_templates_1.builtinTemplates.find(t => t.templateName == templateName);\n        if (!template)\n            throw new Error('Widget not found for template:' + templateName);\n        return template;\n    }\n}\nconst decorateRepositoryWithTemplates = (repository, readonlyTemplates) => new DefaultTemplateRepositoryDecorator(repository, readonlyTemplates);\nexports.decorateRepositoryWithTemplates = decorateRepositoryWithTemplates;\n\n\n//# sourceURL=webpack://ExternalServices/./src/app/template-processing/default-template-repository-decorator.ts?");

/***/ }),

/***/ "./src/app/template-processing/template-compiler.ts":
/*!**********************************************************!*\
  !*** ./src/app/template-processing/template-compiler.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TemplateCompiler = void 0;\nconst template_helpers_1 = __webpack_require__(/*! ./template-helpers */ \"./src/app/template-processing/template-helpers.ts\");\nconst external_services_1 = __webpack_require__(/*! ../../external-services */ \"./src/external-services.tsx\");\n// import Handlebars from \"handlebars/dist/handlebars.js\"\n// import \"handlebars/types/index\"\nconst handlebars_1 = __importDefault(__webpack_require__(/*! handlebars/dist/cjs/handlebars */ \"./node_modules/handlebars/dist/cjs/handlebars.js\"));\ntemplate_helpers_1.customHelpers.forEach(([name, fn]) => handlebars_1.default.registerHelper(name, fn));\n// Object.entries(stringCaseHelpers).map(([name, fn]) => Handlebars.registerHelper(name, fn))\n// Object.entries(helpers).map(([name, fn]) => Handlebars.registerHelper(name, fn))\nhandlebars_1.default.registerHelper('helperMissing', function ( /* dynamic arguments */) {\n    var options = arguments[arguments.length - 1];\n    // const userArgs = Array.prototype.slice.call(arguments, 0, arguments.length - 1)\n    throw {\n        lineNumber: options.loc.start.line,\n        endLineNumber: options.loc.end.line,\n        column: options.loc.start.column,\n        endColumn: options.loc.end.column,\n        name: 'Error',\n        message: options.name + ' is not defined'\n    };\n});\nhandlebars_1.default.registerHelper('blockHelperMissing', (context, options) => {\n    throw {\n        lineNumber: options.loc.start.line,\n        endLineNumber: options.loc.end.line,\n        column: options.loc.start.column,\n        endColumn: options.loc.end.column,\n        name: 'Error',\n        message: options.name + ' is not defined in the block: ' + options.fn(context)\n    };\n});\nclass TemplateCompiler {\n    compileTemplate(template, model) {\n        try {\n            var compiledTemplate = handlebars_1.default.compile(template);\n            //TODO: validate: the test must have When and Then at least.\n            return compiledTemplate(model);\n        }\n        catch (err) {\n            external_services_1.log.log('Template compilation error : ', err);\n            let wrappedError = {\n                startLineNumber: err.lineNumber,\n                endLineNumber: err.endLineNumber,\n                startColumn: err.column,\n                endColumn: err.endColumn,\n                message: err.message\n            };\n            if (!wrappedError.startLineNumber) {\n                //Parse error\n                const lineNumberMatch = String(err).match(/error on line (\\d+)/);\n                if (lineNumberMatch && lineNumberMatch.length > 1) {\n                    wrappedError.startLineNumber = parseInt(lineNumberMatch[1]);\n                    wrappedError.endLineNumber = wrappedError.startLineNumber + 1;\n                }\n            }\n            if (!wrappedError.endLineNumber) {\n                wrappedError.startLineNumber = null;\n            }\n            throw wrappedError;\n        }\n    }\n}\nexports.TemplateCompiler = TemplateCompiler;\n//https://github.com/helpers/handlebars-helpers#install\n\n\n//# sourceURL=webpack://ExternalServices/./src/app/template-processing/template-compiler.ts?");

/***/ }),

/***/ "./src/app/template-processing/template-helpers.ts":
/*!*********************************************************!*\
  !*** ./src/app/template-processing/template-helpers.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.customHelpers = void 0;\nconst string_case_helpers_1 = __webpack_require__(/*! ../../libs/string-case-helpers */ \"./src/libs/string-case-helpers.ts\");\nconst yaml_1 = __webpack_require__(/*! yaml */ \"./node_modules/yaml/browser/index.js\");\nconst helpers = {\n    json(o) {\n        return JSON.stringify(o, null, 4);\n    },\n    yaml(o) {\n        return (0, yaml_1.stringify)(o, { indent: 4 });\n    },\n    concat() {\n        var outStr = '';\n        for (var arg in arguments)\n            if (typeof arguments[arg] != 'object')\n                outStr += arguments[arg];\n        return outStr;\n    },\n    subtract() {\n        return (arguments[0] - arguments[1]).toString();\n    },\n    repeat(text) {\n        return text.repeat(arguments[1]);\n    }\n};\nexports.customHelpers = Object.entries(string_case_helpers_1.stringCaseHelpers)\n    .map((h) => [h[0], (x) => h[1](!x ? '' : x)])\n    .concat(Object.entries(helpers));\n\n\n//# sourceURL=webpack://ExternalServices/./src/app/template-processing/template-helpers.ts?");

/***/ }),

/***/ "./src/external-services.tsx":
/*!***********************************!*\
  !*** ./src/external-services.tsx ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExternalServices = exports.log = void 0;\n// eslint-disable-next-line no-unused-vars\nconst log_1 = __webpack_require__(/*! ./libs/logging/log */ \"./src/libs/logging/log.ts\");\nconst board_mock_1 = __webpack_require__(/*! ./adopters/mocks/board-mock */ \"./src/adopters/mocks/board-mock.tsx\");\nconst miro_board_1 = __webpack_require__(/*! ./adopters/miro/miro-board */ \"./src/adopters/miro/miro-board.ts\");\nconst board_mock_2 = __webpack_require__(/*! ./adopters/mocks/board-mock */ \"./src/adopters/mocks/board-mock.tsx\");\nconst React = __importStar(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nconst miro_template_repository_1 = __webpack_require__(/*! ./adopters/miro/miro-template-repository */ \"./src/adopters/miro/miro-template-repository.ts\");\nconst local_storage_template_repository_1 = __webpack_require__(/*! ./adopters/mocks/local-storage-template-repository */ \"./src/adopters/mocks/local-storage-template-repository.ts\");\nconst default_template_repository_decorator_1 = __webpack_require__(/*! ./app/template-processing/default-template-repository-decorator */ \"./src/app/template-processing/default-template-repository-decorator.ts\");\nconst template_compiler_1 = __webpack_require__(/*! ./app/template-processing/template-compiler */ \"./src/app/template-processing/template-compiler.ts\");\nconst builtin_templates_1 = __webpack_require__(/*! ./app/template-processing/builtin-templates */ \"./src/app/template-processing/builtin-templates.js\");\n// export let singletonBoard: IBoard = new MiroBoard()\nexports.log = log_1.noLog;\n// eslint-disable-next-line no-unused-vars \nconst createMiroDependencies = () => {\n    const emptyComponent = () => React.createElement(React.Fragment, null);\n    return {\n        boardService: new miro_board_1.MiroBoard(),\n        boardUi: emptyComponent,\n        templateRepository: (0, default_template_repository_decorator_1.decorateRepositoryWithTemplates)(new miro_template_repository_1.miroTemplateRepository(), builtin_templates_1.builtinTemplates),\n        templateCompiler: new template_compiler_1.TemplateCompiler(),\n    };\n};\n// eslint-disable-next-line no-unused-vars\nconst createMockedDependencies = () => {\n    return {\n        boardService: (0, board_mock_1.MockBoard)(),\n        boardUi: board_mock_2.UIComponent,\n        templateRepository: (0, default_template_repository_decorator_1.decorateRepositoryWithTemplates)(new local_storage_template_repository_1.localStorageTemplateRepository(), builtin_templates_1.builtinTemplates),\n        templateCompiler: new template_compiler_1.TemplateCompiler(),\n    };\n};\nconst ExternalServices = createMiroDependencies();\nexports.ExternalServices = ExternalServices;\n\n\n//# sourceURL=webpack://ExternalServices/./src/external-services.tsx?");

/***/ }),

/***/ "./src/libs/logging/log.ts":
/*!*********************************!*\
  !*** ./src/libs/logging/log.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.consoleLog = exports.noLog = void 0;\nexports.noLog = {\n    log: () => { },\n    info: () => { },\n    warn: () => { },\n    error: () => { }\n};\nexports.consoleLog = console;\n\n\n//# sourceURL=webpack://ExternalServices/./src/libs/logging/log.ts?");

/***/ }),

/***/ "./src/libs/string-case-helpers.ts":
/*!*****************************************!*\
  !*** ./src/libs/string-case-helpers.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n//    const toString=(s: any):string => s.toString() \nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.stringCaseHelpers = void 0;\nconst snakeToCamelCase = (str) => str.toString().replace(/_./g, x => x[1].toUpperCase());\nconst snakeToPascalCase = (str) => str.toString().replace(/(^|_)./g, str => str.toUpperCase())\n    .replace(/_*/g, '');\nconst snakeToKebabCase = (str) => str.toString().replace(/_/g, '-');\nconst snakeToSpaceCase = (str) => str.toString().replace(/_/g, ' ');\nconst snakeToSentenceCase = (str) => \n// eslint-disable-next-line @typescript-eslint/no-use-before-define\nexports.stringCaseHelpers.capitalize(snakeToSpaceCase(str.toString()));\nconst pascalToSpaceCase = (str) => str\n    // Look for long acronyms and filter out the last letter\n    .replace(/([A-Z]+)([A-Z][a-z])/g, ' $1 $2')\n    // Look for lower-case letters followed by upper-case letters\n    .replace(/([a-z\\d])([A-Z])/g, '$1 $2')\n    // Look for lower-case letters followed by numbers\n    .replace(/([a-zA-Z])(\\d)/g, '$1 $2')\n    .replace(/^./, function (str) { return str.toUpperCase(); })\n    .trim();\nexports.stringCaseHelpers = {\n    lowerCase(str) { return str?.toString()?.toLocaleLowerCase(); },\n    upperCase(str) { return str.toString().toLocaleUpperCase(); },\n    capitalize(str) {\n        str = str.toString();\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n    snakeCase(str) {\n        return pascalToSpaceCase(str.toString())\n            .replace(/(([^A-Z0-9]+)(.)?)/ig, '_$1')\n            .replace(/-|\\s/g, '')\n            .replace(/_+/g, '_')\n            .toLowerCase();\n    },\n    camelCase(str) {\n        return snakeToCamelCase(exports.stringCaseHelpers.snakeCase(str.toString()));\n    },\n    pascalCase(str) {\n        return snakeToPascalCase(exports.stringCaseHelpers.snakeCase(str.toString()));\n    },\n    kebabCase(str) {\n        return snakeToKebabCase(exports.stringCaseHelpers.snakeCase(str.toString()));\n    },\n    spaceCase(str) {\n        return snakeToSpaceCase(exports.stringCaseHelpers.snakeCase(str.toString()));\n    },\n    sentenceCase(str) {\n        return snakeToSentenceCase(exports.stringCaseHelpers.snakeCase(str.toString()));\n    },\n};\n\n\n//# sourceURL=webpack://ExternalServices/./src/libs/string-case-helpers.ts?");

/***/ })

}]);