"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const path = require("path");
const typedoc_1 = require("typedoc");
const options_reader_1 = require("./options-reader");
const theme_1 = require("./theme");
function load(app) {
    addDeclarations(app);
    loadTheme(app);
}
exports.load = load;
function addDeclarations(app) {
    app.options.addDeclaration({
        help: '[Markdown Plugin] Do not render page title.',
        name: 'hidePageTitle',
        type: typedoc_1.ParameterType.Boolean,
        defaultValue: false,
    });
    app.options.addDeclaration({
        help: '[Markdown Plugin] Do not render breadcrumbs in template.',
        name: 'hideBreadcrumbs',
        type: typedoc_1.ParameterType.Boolean,
        defaultValue: false,
    });
    app.options.addDeclaration({
        help: '[Markdown Plugin] Specifies the base path that all links to be served from. If omitted all urls will be relative.',
        name: 'publicPath',
        type: typedoc_1.ParameterType.String,
    });
    app.options.addDeclaration({
        help: '[Markdown Plugin] Use HTML named anchors as fragment identifiers for engines that do not automatically assign header ids. Should be set for Bitbucket Server docs.',
        name: 'namedAnchors',
        type: typedoc_1.ParameterType.Boolean,
        defaultValue: false,
    });
    app.options.addDeclaration({
        help: '[Markdown Plugin] Output all reflections into seperate output files.',
        name: 'allReflectionsHaveOwnDocument',
        type: typedoc_1.ParameterType.Boolean,
        defaultValue: false,
    });
    app.options.addDeclaration({
        help: '[Markdown Plugin] Separator used to format filenames.',
        name: 'filenameSeparator',
        type: typedoc_1.ParameterType.String,
        defaultValue: '.',
    });
    app.options.addDeclaration({
        help: '[Markdown Plugin] The file name of the entry document.',
        name: 'entryDocument',
        type: typedoc_1.ParameterType.String,
        defaultValue: 'README.md',
    });
    app.options.addDeclaration({
        help: '[Markdown Plugin] Do not render in-page table of contents items.',
        name: 'hideInPageTOC',
        type: typedoc_1.ParameterType.Boolean,
        defaultValue: false,
    });
    app.options.addDeclaration({
        help: '[Markdown Plugin] Customise the index page title.',
        name: 'indexTitle',
        type: typedoc_1.ParameterType.String,
    });
}
function loadTheme(app) {
    const themeRef = app.options.getValue('theme');
    if (['default', 'markdown'].includes(themeRef)) {
        app.renderer.theme = new theme_1.MarkdownTheme(app.renderer);
    }
    else {
        const CustomTheme = getCustomTheme(path.resolve(path.join(themeRef, 'theme.js')));
        if (CustomTheme !== null) {
            app.options.addReader(new options_reader_1.CustomOptionsReader());
            app.renderer.theme = new CustomTheme(app.renderer);
        }
        else {
            app.logger.warn(`[typedoc-plugin-markdown] '${themeRef}' is not a recognised markdown theme.`);
        }
    }
}
function getCustomTheme(themeFile) {
    try {
        const ThemeClass = require(themeFile);
        const instance = ThemeClass[Object.keys(ThemeClass)[0]];
        return instance.prototype instanceof theme_1.MarkdownTheme ? instance : null;
    }
    catch (e) {
        return null;
    }
}
