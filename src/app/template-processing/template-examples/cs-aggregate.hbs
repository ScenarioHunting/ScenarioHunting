{{> main}}
{{>format_undefined}}
{{#*inline 'main'}}
using Xunit;
using FluentAssertions;
using {{context}};

namespace {{toPascalCase context}}
{
    public class {{toPascalCase scenario}}Spec
    {
        [Fact]
    {{#each data as |example key|}}
        public void {{toPascalCase @root.scenario}}{{#if key}}{{key}}{{/if}}()
        {
            var {{toCamelCase @root.subject}} = new {{toPascalCase @root.subject}}();
           
        {{#each example.given as |value key|}}
            {{toCamelCase @root.subject}}.On({{>format data=value schema=(lookup (lookup ../../given key) 'schema')  }});
        {{/each}}

            {{toCamelCase @root.subject}}.Handle({{>format data=example.when schema=../when.schema  }});
            {{!-- {{toCamelCase @root.subject}}.{{toPascalCase @root.when.schema.title}}({{>format data=example.when schema=../when.schema  }}); --}}

            {{toCamelCase  @root.subject}}.Events.Should().ContainEquivalentOf(
            {{#each example.then as |value key|}}
                {{>format data=value schema=(lookup (lookup ../../then key) 'schema')  }}
            {{/each}}
);
        }
    {{/each}}
    }
}
{{/inline}}

{{#*inline "format" data schema}}
{{>(concat 'format_' schema.type) data=data schema=schema}}
{{/inline}}

{{#*inline "format_string" data}}"{{data}}"{{/inline}}
{{#*inline "format_number" data}}{{data}}{{/inline}}
{{#*inline "format_boolean" data}}{{data}}{{/inline}}
{{#*inline "format_object"  data schema}}new {{pascalCase schema.title}}(
    {{#each data as |value key|}}
                        {{key}}: {{> format data=value schema=(lookup ../schema.properties key) }}{{#unless @last}},{{/unless}}
    {{/each}}        ){{/inline}}

{{#*inline "format_array" data schema }}
        {{#if schema.items.[0]}}
new[]{ {{#each data as |value key|}}
                                {{>format data=value schema=(lookup ../schema.items key)}}{{#unless @last}},{{/unless}}{{/each}}   
                            }{{else}}new({{#each data as |value key|}}
                                {{>format  data=value schema=../schema.items}}{{#unless @last}},{{/unless}}{{/each}}
                            ){{/if}}{{/inline}}



{{#*inline "format_undefined" data schema}}
STRUCTURAL ERROR: UNKNOWN SCHEMA TYPE:
The field 'type' is not found in the schema
---------Internal-SCHEMA:------------
{{{yaml schema}}}
---------INTERNAL-DATA:--------------------
{{{yaml data}}}
------------THIS:--------------------
{{{yaml .}}}
{{/inline}}