/*! For license information please see index.js.LICENSE.txt */
var templateRepo;(()=>{"use strict";var __webpack_modules__={"./src/adopters/miro/miro-board.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "MiroBoard": () => (/* binding */ MiroBoard)\n/* harmony export */ });\n/* harmony import */ var _app_scenario_builder_board_text_schema_extractor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../app/scenario-builder/board-text-schema-extractor */ "./src/app/scenario-builder/board-text-schema-extractor.ts");\n/* harmony import */ var _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global-dependency-container */ "./src/global-dependency-container.ts");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/* eslint-disable no-undef */\n\n\n// import { log } from "./libs/logging/log";\nclass MiroBoard {\n    constructor() {\n        this.unselectAll = () => __awaiter(this, void 0, void 0, function* () {\n            if (!miro || !miro.board)\n                yield new Promise(resolve => setTimeout(resolve, 200));\n            yield miro.board.selection.clear();\n        });\n        this.showNotification = (message) => miro.showNotification(message);\n        this.zoomTo = (widget) => miro.board.viewport.zoomToObject(widget.id, true);\n    }\n    openModal(iframeURL, options) {\n        return miro.board.ui.openModal(iframeURL, options);\n    }\n    // eslint-disable-next-line no-unused-vars\n    onWidgetLeft(updateText) {\n        const select = (selections) => __awaiter(this, void 0, void 0, function* () {\n            var widgets = selections.data;\n            if (!this.previouslySelectedWidgets)\n                this.previouslySelectedWidgets = widgets;\n            this.previouslySelectedWidgets.forEach(item => updateText(item.id));\n            this.previouslySelectedWidgets = widgets;\n        });\n        miro.addListener("SELECTION_UPDATED", select);\n    }\n    // eslint-disable-next-line no-unused-vars\n    interceptPossibleTextEdit(updateText) {\n        const select = (selections) => __awaiter(this, void 0, void 0, function* () {\n            var widgets = selections.data;\n            if (!this.previouslySelectedWidgets) {\n                this.previouslySelectedWidgets = widgets;\n            }\n            this.previouslySelectedWidgets.forEach((item) => __awaiter(this, void 0, void 0, function* () {\n                let widget = (yield miro.board.widgets.get({ id: item.id }))[0];\n                const originalWidgetText = yield extractWidgetText(widget);\n                const newText = yield updateText(widget.id, originalWidgetText);\n                widget = yield setWidgetText(widget, newText);\n                if (newText != originalWidgetText)\n                    yield miro.board.widgets.update([widget]);\n            }));\n            this.previouslySelectedWidgets = widgets;\n        });\n        miro.addListener("SELECTION_UPDATED", select);\n    }\n    // eslint-disable-next-line no-unused-vars\n    getWidgetText(widgetId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log("Finding widget by id:" + widgetId);\n            var widget = (yield miro.board.widgets.get({ id: widgetId }))[0];\n            return yield extractWidgetText(widget);\n        });\n    }\n    updateWidgetText(widgetId, newWidgetText) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let widget = (yield miro.board.widgets.get({ id: widgetId }))[0];\n            widget = yield setWidgetText(widget, newWidgetText);\n            yield miro.board.widgets.update([widget]);\n        });\n    }\n    // eslint-disable-next-line no-unused-vars\n    onNextSingleSelection(succeed) {\n        //TODO: Guard \n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log("Waiting for the next single selection!");\n        const select = (selections) => __awaiter(this, void 0, void 0, function* () {\n            var widgets = selections.data;\n            if (widgets.length == 0)\n                return;\n            _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log("Selected.");\n            if (widgets.length > 1) {\n                _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log(`${widgets.length} items are selected. Only a single one can be selected.`);\n                return;\n            }\n            _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log("Getting the widget.");\n            var widget = (yield miro.board.widgets.get({ id: widgets[0].id }))[0];\n            _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log("Converting the widget");\n            extractSchemaFrom(widget)\n                .then(selected => {\n                // if (typeof dto == \'string\')\n                //     logger.log(dto)\n                // else {\n                _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log("Selected:", selected);\n                succeed(selected);\n                miro.removeListener("SELECTION_UPDATED", select);\n                // }\n            })\n                .catch(_global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log);\n        });\n        if (this.previousListener)\n            miro.removeListener("SELECTION_UPDATED", this.previousListener);\n        this.previousListener = select;\n        return miro.addListener("SELECTION_UPDATED", select);\n    }\n}\nfunction getTheStartingWidget(arrow) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const all = yield miro.board.widgets.get({ id: arrow.startWidgetId });\n        if (all.length == 0)\n            yield miro.showNotification("Examples should be connected to a fact they belong to.");\n        return all[0];\n    });\n}\nfunction getIncomingArrows(exampleWidget) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return (yield (yield miro.board.widgets.get({ type: "LINE", endWidgetId: exampleWidget.id }))\n            .map(line => line))\n            .filter(line => line.captions.map(caption => caption.text.toLowerCase()).includes("example")\n            && line.style.lineEndStyle != miro.enums.lineArrowheadStyle.NONE);\n    });\n}\nfunction getAbstractionWidgetFor(exampleWidget) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const incomingArrows = yield getIncomingArrows(exampleWidget);\n        if (incomingArrows.length === 0)\n            return Promise.resolve(exampleWidget);\n        const widgetsPointingToThis = yield Promise.all(incomingArrows.map(getTheStartingWidget));\n        if (widgetsPointingToThis.length > 1) {\n            const errorMessage = "Examples can not belong to more than one abstraction (only one incoming line).";\n            yield miro.showNotification(errorMessage);\n            return Promise.reject(errorMessage);\n        }\n        return Promise.resolve(widgetsPointingToThis[0]);\n    });\n}\nfunction getWidgetStyle(widget) {\n    const style = {};\n    if (widget["style"] && widget["style"]["backgroundColor"]) {\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log(\'Setting style:\', widget["style"]["backgroundColor"]);\n        style.backgroundColor = widget["style"]["backgroundColor"];\n    }\n    else if (widget["style"] && widget["style"]["stickerBackgroundColor"]) {\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log(\'Setting style:\', widget["style"]["stickerBackgroundColor"]);\n        style.backgroundColor = widget["style"]["stickerBackgroundColor"];\n    }\n    return style;\n}\nfunction extractSchemaFrom(exampleWidget) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var snapshot = {\n            id: exampleWidget.id,\n            // type: widget.type,\n        };\n        const abstractionWidget = yield getAbstractionWidgetFor(exampleWidget);\n        //\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log(\'Selection dto initiated.\', snapshot);\n        snapshot.style = getWidgetStyle(abstractionWidget);\n        let exampleText;\n        let abstractionText;\n        try {\n            const getPlainText = (originalText) => originalText.split(\'</p><p>\').join(\'\\n\')\n                .replace(\'<p>\', \'\')\n                .replace(\'</p>\', \'\')\n                .replace(\'&#43;\', \'+\');\n            exampleText = getPlainText(yield extractWidgetText(exampleWidget));\n            abstractionText = getPlainText(yield extractWidgetText(abstractionWidget));\n        }\n        catch (e) {\n            return Promise.reject(\'The widget \' + JSON.stringify(exampleWidget) + \' does not have any text.\');\n        }\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_1__.log.log(\'Widget text converted by board:\', exampleText);\n        try {\n            const step = {\n                widgetSnapshot: snapshot,\n                stepSchema: yield (0,_app_scenario_builder_board_text_schema_extractor__WEBPACK_IMPORTED_MODULE_0__.extractStepSchema)({\n                    abstractionWidgetText: abstractionText,\n                    exampleWidgetText: exampleText\n                })\n            };\n            return step;\n        }\n        catch (e) {\n            console.error(e);\n            return Promise.reject(e);\n        }\n    });\n}\nfunction extractWidgetText(widget) {\n    if (!widget)\n        return Promise.reject("Cannot get the widget text. The widget is undefined.");\n    if ("text" in widget)\n        return widget["text"];\n    if ("title" in widget)\n        return widget["title"];\n    if ("captions" in widget\n        && widget["captions"]\n        && widget["captions"][0]\n        && widget["captions"][0]["text"])\n        return Promise.resolve(widget["captions"][0]["text"]);\n    return Promise.reject("Cannot get the widget text. The widget has no text fields.");\n}\nfunction setWidgetText(widget, text) {\n    const anyWidget = widget;\n    if ("text" in widget)\n        anyWidget["text"] = text;\n    else if ("title" in widget)\n        anyWidget["title"] = text;\n    else if ("captions" in widget)\n        anyWidget["captions"][0]["text"] = text;\n    else\n        return Promise.reject("Cannot set the widget text. The widget has no text fields.");\n    return Promise.resolve(anyWidget);\n}\n\n\n//# sourceURL=webpack://templateRepo/./src/adopters/miro/miro-board.ts?')},"./src/app/scenario-builder/board-text-schema-extractor.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extractStepSchema\": () => (/* binding */ extractStepSchema)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst toSnakeCase = (str) => str.trim()\n    .replace(/(([^A-Z0-9]+)(.)?)/ig, '_$1')\n    .replace(/-/g, '')\n    .replace(/\\s/g, '')\n    .replace(/_+/g, '_')\n    .toLowerCase();\nconst removeStartingDash = (str) => str[0] == '-' ? str.substring(1) : str;\nfunction extractStepSchema({ abstractionWidgetText, exampleWidgetText }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let title = abstractionWidgetText.trim().split('\\n').shift();\n        if (!title) {\n            return Promise.reject(\"Unknown text format.\");\n        }\n        const rows = exampleWidgetText.split(/\\n|;|,|\\//);\n        if (rows[0] == title) {\n            rows.shift();\n        }\n        title = toSnakeCase(title).trim();\n        var props = {};\n        rows.map(row => row.split(\":\")).forEach(kv => {\n            const purePropertyName = removeStartingDash(kv[0].trim());\n            if (purePropertyName == '')\n                return;\n            const propertyName = toSnakeCase(purePropertyName);\n            let propertyValue = kv[1];\n            if (!propertyValue) {\n                propertyValue = purePropertyName;\n            }\n            props[propertyName] = {\n                type: \"string\",\n                description: propertyName,\n                example: propertyValue.trim()\n            };\n        });\n        return Promise.resolve({\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            type: 'object',\n            title: title,\n            properties: props,\n        });\n    });\n}\nconst toCamelCase = (str) => str.trim() //.toLowerCase()\n    .replace(/([^A-Z0-9]+)(.)/ig, function () {\n    return arguments[2].toUpperCase();\n});\n\n\n//# sourceURL=webpack://templateRepo/./src/app/scenario-builder/board-text-schema-extractor.ts?")},"./src/global-dependency-container.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "singletonBoard": () => (/* binding */ singletonBoard),\n/* harmony export */   "testResultReports": () => (/* binding */ testResultReports),\n/* harmony export */   "log": () => (/* binding */ log)\n/* harmony export */ });\n/* harmony import */ var _test_result_reports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./test-result-reports */ "./src/test-result-reports.ts");\n/* harmony import */ var _adopters_miro_miro_board__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adopters/miro/miro-board */ "./src/adopters/miro/miro-board.ts");\n\n// import { MockBoard } from "./adopters/mocks/board-mock";\n// export let singletonBoard: IBoard = MockBoard()\n\nlet singletonBoard = new _adopters_miro_miro_board__WEBPACK_IMPORTED_MODULE_1__.MiroBoard();\nlet testResultReports = new _test_result_reports__WEBPACK_IMPORTED_MODULE_0__.TestResultReports();\nlet log = console;\n\n\n//# sourceURL=webpack://templateRepo/./src/global-dependency-container.ts?')},"./src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global-dependency-container */ "./src/global-dependency-container.ts");\n/* harmony import */ var _test_result_reports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./test-result-reports */ "./src/test-result-reports.ts");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n// import { createOrUpdateSampleTemplates } from "./adopters/template-repository";\n/* eslint-disable no-undef */\nconst testIcon = \'<path fill="currentColor" fill-rule="nonzero" d="M15,4h1V2H8V4H9v6.6L2.25,22H21.75L15,10.6Zm3.25,16H5.75L11,11.15V4h2v7.15Z"/>\';\n// async function makeAnExample(sourceWidget: SDK.IWidget) { // accept widgets as parameter, work on te\n// \t// const selectedWidgets  = await miro.board.selection.get()\n// \t// if (widgets.length != 1)\n// \t// \treturn\n// \t// const sourceWidget = widgets[0]\n// \tlogger.log("SOURCE!!!!!!!!!!!!!!", sourceWidget)\n// \tconst exampleWidget = await miro.board.widgets.create({ type: sourceWidget.type, bounds: { x: sourceWidget.bounds.x, y: sourceWidget.bounds.y } });\n// \tlogger.log("EXAMPLE!!!!!!!!!!!!!!", exampleWidget)\n// \t// //let result = await miro.board.selection.get();\n// \t// let result = widgets;\n// \t// var textEdit = (await miro.board.widgets.get({ id: result[0].id }))[0][\'text\'];\n// \t// // if (textEdit.includes("<u>")) {\n// \t// textEdit = textEdit.replace("<u>", "").replace("</u>", "");\n// \t// // } else {\n// \t// // textEdit = textEdit \n// \t// // textEdit = "<input type=\'text\' placeholder=\'" + textEdit + "\'></input>"\n// \t// // }\n// \t// miro.board.widgets.update({\n// \t// \tid: result[0][\'id\'],\n// \t// \ttext: textEdit\n// \t// })\n// }\nconst attachReportToWidgetByWidgetId = (widgetId, theOriginalText) => __awaiter(void 0, void 0, void 0, function* () {\n    var vm = yield _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.testResultReports.getTestSummeryForWidget(widgetId);\n    if (typeof vm == \'boolean\')\n        return theOriginalText;\n    return attachReportToWidgetText(vm, theOriginalText);\n});\nconst attachReportToWidgetText = (vm, theOriginalText) => {\n    const cleanLastReport = (textIncludingReport) => {\n        var regex = new RegExp("<div data-section=\'test-summery\'>.*</div>");\n        const widgetAlreadyContainsAReport = regex.test(textIncludingReport);\n        if (widgetAlreadyContainsAReport)\n            textIncludingReport = textIncludingReport.replace(regex, "");\n        textIncludingReport = textIncludingReport\n            .replace(new RegExp("Failing[(]\\\\d+/\\\\d+[)]"), "")\n            .replace(new RegExp("Passing[(]\\\\d+/\\\\d+[)]"), "")\n            .replace(new RegExp("Skipping[(]\\\\d+/\\\\d+[)]"), "")\n            .replace(new RegExp("Pending[(]\\\\d+/\\\\d+[)]"), "")\n            .replace(new RegExp(`<div><span style="background-color:#de2f2f;color:#fff"> &nbsp;</span><span style="background-color:#1fab0f;color:#eff"> &nbsp;</span><span style="background-color:#f1c807;color:#046"> &nbsp;</span><span style="background-color:#199;color:#fff"> &nbsp;</span></div>`), "")\n            .replace(new RegExp(`<span style="background-color:.+>.+</span>`), "");\n        // "<div><span style="background-color:#de2f2f;color:#fff">  </span><span style="background-color:#1fab0f;color:#eff">  </span><span style="background-color:#f1c807;color:#046">  </span><span style="background-color:#199;color:#fff">  </span></div><div><span style="background-color:#de2f2f;color:#fff">  </span><span style="background-color:#1fab0f;color:#eff">  </span><span style="background-color:#f1c807;color:#046">  </span><span style="background-color:#199;color:#fff">  </span></div><div data-section=\'test-summery\'><span style=\'background-color:#de2f2f;color:#fff\'> Failing(0/1) </span><span style=\'background-color:#1fab0f;color:#eff\'> Passing(1/1) </span><span style=\'background-color:#f1c807;color:#046\'> Skipping(0/1) </span><span style=\'background-color:#199;color:#fff\'> Pending(0/1) </span></div>"\n        return textIncludingReport;\n    };\n    theOriginalText = cleanLastReport(theOriginalText);\n    var reportComponent = "<div data-section=\'test-summery\'>" +\n        "<span style=\'background-color:#de2f2f;color:#fff\'> Failing(" + vm.failed + "/" + vm.total + ") </span>" +\n        "<span style=\'background-color:#1fab0f;color:#eff\'> Passing(" + vm.passed + "/" + vm.total + ") </span>" +\n        "<span style=\'background-color:#f1c807;color:#046\'> Skipping(" + vm.skipped + "/" + vm.total + ") </span>" +\n        "<span style=\'background-color:#199;color:#fff\'> Pending(" + vm.pending + "/" + vm.total + ") </span>" +\n        "</div>";\n    return theOriginalText + reportComponent;\n};\nconst applyReportToWidget = (widgetId, vm) => __awaiter(void 0, void 0, void 0, function* () {\n    const originalWidgetText = yield _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.singletonBoard.getWidgetText(widgetId);\n    const newWidgetText = attachReportToWidgetText(vm, originalWidgetText);\n    yield _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.singletonBoard.updateWidgetText(widgetId, newWidgetText);\n});\nlet generateBoardSection = (content) => {\n    _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.log.log("GeneratingBoardBasedOn:", content);\n};\nlet subscribeToServerEvents = (webSocketUrl) => {\n    let ws = new WebSocket(webSocketUrl);\n    function connect() {\n        var reconnectionTimer = setInterval(() => {\n            try {\n                ws = new WebSocket(webSocketUrl);\n                clearInterval(reconnectionTimer);\n            }\n            catch (e) {\n                _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.log.log(e);\n            }\n        }, 1000);\n    }\n    ws.onopen = function () {\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.log.log("Websocket connection opened");\n    };\n    ws.onclose = function () {\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.log.log("Web socket closed, trying to reconnect.");\n        connect();\n        // ws = null;\n    };\n    ws.onmessage = function (evt) {\n        if (evt.data && evt.data.messageType == "BoardSectionGenerated") {\n            var content = evt.data.content;\n            generateBoardSection(content);\n        }\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.log.log("Summery: " + evt.data);\n        var message = JSON.parse(evt.data);\n        const summery = (0,_test_result_reports__WEBPACK_IMPORTED_MODULE_1__.TestReportToSummery)(message.testReport);\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.log.log("Summery: " + JSON.stringify(summery));\n        applyReportToWidget(message.id, summery).catch(_global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.log.log);\n        // const widget = miro.board.widgets.get({ id: evt.data.id })\n    };\n    ws.onerror = function (evt) {\n        _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.log.log("ERROR: " + evt);\n        connect();\n    };\n};\nmiro.onReady(() => __awaiter(void 0, void 0, void 0, function* () {\n    // logger.log("Client Id:", miro.getClientId())3074457349056199734\n    // .............................................3074457349056199734\n    yield _global_dependency_container__WEBPACK_IMPORTED_MODULE_0__.singletonBoard.interceptPossibleTextEdit(attachReportToWidgetByWidgetId);\n    yield miro.initialize({\n        extensionPoints: {\n            getWidgetMenuItems: (widgets /*, editMode: boolean*/) => {\n                const supportedWidgetsInSelection = widgets;\n                // .filter((widget) => Config.supported_widgets[widget.type.toLowerCase()] \n                // \t\t\t\t\t\t\t\t\t!== undefined);\n                // All selected widgets have to be supported in order to show the menu\n                if (supportedWidgetsInSelection.length == widgets.length && widgets.length == 1) {\n                    return Promise.resolve([{\n                            tooltip: \'Make an Example\',\n                            svgIcon: testIcon,\n                            onClick: () => {\n                                // miro.board.ui.openLeftSidebar(\'sidebar.html\')\n                                // makeAnExample(widgets[0])\n                                // handleAuthAndOpenWindow(openEstimateModal, widgets);\n                            }\n                        }]);\n                }\n                // Not all selected widgets are supported, we won\'t show the menu\n                return Promise.resolve([{}]);\n            },\n            // exportMenu: {\n            // \ttitle: \'Boilerplate export\',\n            // \tsvgIcon: icon24,\n            // \tonClick: () => {\n            // \t\t// Remember that \'modal.html\' resolves relative to main.js file. So modal.html have to be in the /dist/ folder.\n            // \t\tmiro.board.ui.openModal(\'modal.html\')\n            // \t}\n            // },\n            bottomBar: {\n                title: \'Context Reflective Test\',\n                svgIcon: testIcon,\n                onClick: () => {\n                    miro.board.ui.openLeftSidebar(\'sidebar.html\');\n                }\n            }\n        }\n    });\n    // subscribeToServerEvents("ws://localhost:8080/ws")\n    // createOrUpdateSampleTemplates()\n}));\n\n\n//# sourceURL=webpack://templateRepo/./src/index.ts?')},"./src/test-result-reports.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "WhenTestResultsSummeryViewModel": () => (/* binding */ WhenTestResultsSummeryViewModel),\n/* harmony export */   "WhenTestReportViewModel": () => (/* binding */ WhenTestReportViewModel),\n/* harmony export */   "TestResultReports": () => (/* binding */ TestResultReports),\n/* harmony export */   "TestReportToSummery": () => (/* binding */ TestReportToSummery)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/* eslint-disable no-undef */\nclass WhenTestResultsSummeryViewModel {\n}\nclass WhenTestReportViewModel {\n}\nclass TestResultReports {\n    constructor() {\n        this.getTestSummeryForWidget = (widgetId) => __awaiter(this, void 0, void 0, function* () {\n            const widget = (yield miro.board.widgets.get({ id: widgetId }))[0];\n            if (!widget\n                || !widget.metadata[miro.getClientId()]\n                || !widget.metadata[miro.getClientId()].testReport\n                || !widget.metadata[miro.getClientId()].testReport) {\n                return false;\n            }\n            const report = widget.metadata[miro.getClientId()].testReport;\n            // const result: WhenTestResultsSummeryViewModel = {\n            //     total: (report.passed ?? []).length + (report.failed ?? []).length + (report.pending ?? []).length + (report.skipped ?? []).length,\n            //     passed: (report.passed ?? []).length,\n            //     failed: (report.failed ?? []).length,\n            //     skipped: (report.skipped ?? []).length,\n            //     pending: (report.pending ?? []).length,\n            //     // example: widget.metadata[miro.getClientId()].testSummery.example\n            // }\n            return TestReportToSummery(report);\n            // if (!widget\n            //     || !widget.metadata[miro.getClientId()]\n            //     || !widget.metadata[miro.getClientId()].testReport\n            //     || !(widget.metadata[miro.getClientId()].testReport as WhenTestReportViewModel)\n            //     || !((widget.metadata[miro.getClientId()].testReport as WhenTestReportViewModel).summery)) {\n            //     return false\n            // }\n            // return widget.metadata[miro.getClientId()].testSummery as WhenTestResultsSummeryViewModel\n        });\n    }\n}\nfunction TestReportToSummery(report) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const result = {\n        total: ((_a = report.passed) !== null && _a !== void 0 ? _a : []).length + ((_b = report.failed) !== null && _b !== void 0 ? _b : []).length + ((_c = report.pending) !== null && _c !== void 0 ? _c : []).length + ((_d = report.skipped) !== null && _d !== void 0 ? _d : []).length,\n        passed: ((_e = report.passed) !== null && _e !== void 0 ? _e : []).length,\n        failed: ((_f = report.failed) !== null && _f !== void 0 ? _f : []).length,\n        skipped: ((_g = report.skipped) !== null && _g !== void 0 ? _g : []).length,\n        pending: ((_h = report.pending) !== null && _h !== void 0 ? _h : []).length,\n        // example: widget.metadata[miro.getClientId()].testSummery.example\n    };\n    return result;\n}\n\n\n//# sourceURL=webpack://templateRepo/./src/test-result-reports.ts?')}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/index.ts");templateRepo=__webpack_exports__})();