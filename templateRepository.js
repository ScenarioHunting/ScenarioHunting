/*! For license information please see templateRepository.js.LICENSE.txt */
var templateRepo;(()=>{"use strict";var __webpack_modules__={"./src/app/template-processing/template-repository.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "getTemplateRepository": () => (/* binding */ getTemplateRepository),\n/* harmony export */   "createOrUpdateSampleTemplates": () => (/* binding */ createOrUpdateSampleTemplates)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// import { log } from \'../../libs/logging/log\';\nconst log = console;\n/* eslint-disable no-undef */\nclass templateRepository {\n    // constructor() {\n    //     miro.board.widgets.get({\n    //         metadata: {\n    //             [miro.getClientId()]: {\n    //                 "role": role,\n    //             }\n    //         }\n    //     }).then(widgets =>\n    //         widgets.forEach(w => {\n    //             logger.log(`Template :${w.metadata} is found.`)\n    //             w.clientVisible = false\n    //             miro.board.widgets.update(w).then(() => logger.log("The template widgets are hidden."))\n    //         }))\n    // }\n    getAllTemplateNames() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var widgets = yield this.findAllTemplateWidgets();\n            return widgets\n                .map(w => {\n                log.log(\'template:\' + w.metadata[miro.getClientId()]["templateName"] + "found!");\n                return w.metadata[miro.getClientId()]["templateName"];\n            });\n        });\n    }\n    removeTemplate(templateName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var widgets = yield this.findWidgetByTemplateName(templateName);\n            widgets.forEach((widget) => __awaiter(this, void 0, void 0, function* () { return yield miro.board.widgets.deleteById(widget.id); }));\n        });\n    }\n    createOrReplaceTemplate(originalTemplateName, template) {\n        return __awaiter(this, void 0, void 0, function* () {\n            log.log(\'createOrReplaceTemplate:\');\n            log.log(\'finding widget for template:\', originalTemplateName);\n            var widgets = yield this.findAllTemplateWidgets();\n            var x;\n            var y;\n            if (widgets.length > 0) {\n                const firstWidget = widgets[0];\n                x = firstWidget.x;\n                y = firstWidget.y;\n            }\n            else {\n                const viewport = yield miro.board.viewport.get();\n                x = viewport.x - 200;\n                y = viewport.y - 200;\n            }\n            widgets = this.filterWidgetsByTemplateName(widgets, originalTemplateName);\n            log.log(`${widgets.length} widgets found for template with name: ${originalTemplateName}`);\n            // var dbWidgets = widgets.filter(i => !isNullOrUndefined(i.metadata[miro.getClientId()].templateName));\n            if (widgets.length == 0) {\n                log.log("Creating template:", template);\n                yield miro.board.widgets.create({\n                    type: "TEXT",\n                    text: template.contentTemplate,\n                    metadata: {\n                        [miro.getClientId()]: template\n                    },\n                    capabilities: {\n                        editable: false\n                    },\n                    style: {\n                        textAlign: "l"\n                    },\n                    x: x,\n                    y: y,\n                    // clientVisible: false\n                });\n                log.log(`template: ${template.templateName} is created successfully.`);\n            }\n            else {\n                log.log("Updating template:", template);\n                var dbWidget = widgets[0];\n                // dbWidget["test"] = template.contentTemplate\n                dbWidget.metadata[miro.getClientId()] = template;\n                // dbWidget.metadata[miro.getClientId()].clientVisible = false;\n                yield miro.board.widgets.update(dbWidget);\n                log.log(`template:${template.templateName} is updated successfully.`);\n            }\n        });\n    }\n    findAllTemplateWidgets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // var stat = (await miro.board.widgets.get()).filter(x => x.type == \'TEXT\' && x["text"].includes(\'using\'))\n            // logger.log("# of widgets contain using in their text:", stat.length)\n            var widgets = yield miro.board.widgets.get();\n            // logger.log("# of widgets that have metadata.clientId.templateName:", widgets.filter(i => i.metadata && i.metadata[miro.getClientId()] && i.metadata[miro.getClientId()] && i.metadata[miro.getClientId()]["templateName"]).length)\n            return widgets\n                .filter(i => i.type == \'TEXT\'\n                && i.metadata && i.metadata[miro.getClientId()]\n                && i.metadata[miro.getClientId()]\n                && i.metadata[miro.getClientId()]["templateName"]);\n        });\n    }\n    filterWidgetsByTemplateName(widgets, templateName) {\n        return widgets.filter(w => w.metadata[miro.getClientId()]["templateName"] == templateName);\n    }\n    findWidgetByTemplateName(templateName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.filterWidgetsByTemplateName(yield this.findAllTemplateWidgets(), templateName);\n        });\n    }\n    getTemplateByName(templateName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var widgets = yield this.findWidgetByTemplateName(templateName);\n            if (widgets.length == 0)\n                throw new Error("Widget not found for template:" + templateName);\n            log.log("Widgets found:", widgets);\n            var template = widgets[0].metadata[miro.getClientId()];\n            log.log("Corresponding metadata:", widgets[0].metadata[miro.getClientId()]);\n            log.log("Corresponding template:", template);\n            return template;\n        });\n    }\n}\nfunction addSamplesToRepository(repository) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const sampleTemplates = [\n            {\n                fileNameTemplate: "{{scenario}}",\n                fileExtension: "cs",\n                contentTemplate: `using StoryTest;\nusing Vlerx.Es.Messaging;\nusing Vlerx.Es.Persistence;\nusing Vlerx.SampleContracts.{{sut}};\nusing Vlerx.{{context}}.{{sut}};\nusing Vlerx.{{context}}.{{sut}}.Commands;\nusing Vlerx.{{context}}.Tests.StoryTests;\nusing Xunit;\n\nnamespace {{context}}.Tests\n{\n    {{#* inline "callConstructor"}}\n    new {{title}}({{#each properties}}"{{example}}"{{#skipLast}},{{/skipLast}}{{/each}}){{/inline}}\n\n    public class {{scenario}} : IStorySpecification\n    {\n        public IDomainEvent[] Given\n        => new IDomainEvent[]{\n    {{#each givens}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n\n        public ICommand When\n        => {{> callConstructor when}};\n\n        public IDomainEvent[] Then\n        => new IDomainEvent[]{\n    {{#each thens}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n\n        public string Sut { get; } = nameof({{sut}});\n\n        [Fact]\n        public void Run()\n        => TestAdapter.Test(this\n                , setupUseCases: eventStore =>\n                        new[] {\n                        new {{sut}}UseCases(new Repository<{{sut}}.State>(eventStore))\n                        });\n    }\n}`,\n                templateName: "sample-template"\n            },\n            {\n                fileNameTemplate: "{{scenario}}",\n                fileExtension: "features",\n                contentTemplate: `using StoryTest;\nusing Vlerx.Es.Messaging;\nusing Vlerx.Es.Persistence;\nusing Vlerx.SampleContracts.{{sut}};\nusing Vlerx.{{context}}.{{sut}};\nusing Vlerx.{{context}}.{{sut}}.Commands;\nusing Vlerx.{{context}}.Tests.StoryTests;\nusing Xunit;\n\nnamespace {{context}}.Tests\n{\n    {{#* inline "callConstructor"}}\n    new {{title}}({{#each properties}}"{{example}}"{{#skipLast}},{{/skipLast}}{{/each}}){{/inline}}\n\n    public class {{scenario}} : IStorySpecification\n    {\n        public IDomainEvent[] Given\n        => new IDomainEvent[]{\n    {{#each givens}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n        public ICommand When\n        => {{> callConstructor when}};\n        public IDomainEvent[] Then\n        => new IDomainEvent[]{\n    {{#each thens}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n\n        public string Sut { get; } = nameof({{sut}});\n\n        [Fact]\n        public void Run()\n        => TestAdapter.Test(this\n                , setupUseCases: eventStore =>\n                        new[] {\n                        new {{sut}}UseCases(new Repository<{{sut}}.State>(eventStore))\n                        });\n    }\n}`,\n                templateName: "sample-template2"\n            },\n        ];\n        for (var i = 0; i < sampleTemplates.length; i++) {\n            yield repository.createOrReplaceTemplate(sampleTemplates[i].templateName, sampleTemplates[i]);\n        }\n        // sampleTemplates.forEach(async x => await repository.createOrReplaceTemplate(x))\n    });\n}\nfunction getTemplateRepository() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new templateRepository();\n    });\n}\nfunction createOrUpdateSampleTemplates() {\n    return __awaiter(this, void 0, void 0, function* () {\n        var singletonInstance = new templateRepository();\n        yield addSamplesToRepository(singletonInstance);\n    });\n}\n\n\n//# sourceURL=webpack://templateRepo/./src/app/template-processing/template-repository.ts?')}},__webpack_module_cache__={},deferred;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={id:e,exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(e,t,n,a)=>{if(!t){var i=1/0;for(o=0;o<deferred.length;o++){for(var[t,n,a]=deferred[o],r=!0,l=0;l<t.length;l++)(!1&a||i>=a)&&Object.keys(__webpack_require__.O).every((e=>__webpack_require__.O[e](t[l])))?t.splice(l--,1):(r=!1,a<i&&(i=a));r&&(deferred.splice(o--,1),e=n())}return e}a=a||0;for(var o=deferred.length;o>0&&deferred[o-1][2]>a;o--)deferred[o]=deferred[o-1];deferred[o]=[t,n,a]},__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={templateRepository:0};__webpack_require__.O.j=t=>0===e[t];var t=(t,n)=>{var a,i,[r,l,o]=n,s=0;for(a in l)__webpack_require__.o(l,a)&&(__webpack_require__.m[a]=l[a]);for(o&&o(__webpack_require__),t&&t(n);s<r.length;s++)i=r[s],__webpack_require__.o(e,i)&&e[i]&&e[i][0](),e[r[s]]=0;__webpack_require__.O()},n=self.webpackChunktemplateRepo=self.webpackChunktemplateRepo||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var __webpack_exports__=__webpack_require__("./src/app/template-processing/template-repository.ts");__webpack_exports__=__webpack_require__.O(__webpack_exports__),templateRepo=__webpack_exports__})();