var templateRepository;(()=>{"use strict";var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};(()=>{e.r(t),e.d(t,{getTemplateRepository:()=>a,createOrUpdateSampleTemplates:()=>o});var n=function(e,t,n,i){return new(n||(n=Promise))((function(a,o){function l(e){try{r(i.next(e))}catch(e){o(e)}}function s(e){try{r(i.throw(e))}catch(e){o(e)}}function r(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,s)}r((i=i.apply(e,t||[])).next())}))};class i{getAllTemplateNames(){return n(this,void 0,void 0,(function*(){return(yield this.findAllTemplateWidgets()).map((e=>(console.log("template:"+e.metadata[miro.getClientId()].templateName+"found!"),e.metadata[miro.getClientId()].templateName)))}))}removeTemplate(e){return n(this,void 0,void 0,(function*(){(yield this.findWidgetByTemplateName(e)).forEach((e=>n(this,void 0,void 0,(function*(){return yield miro.board.widgets.deleteById(e.id)}))))}))}createOrReplaceTemplate(e,t){return n(this,void 0,void 0,(function*(){console.log("createOrReplaceTemplate:"),console.log("finding widget for template:",e);var n=yield this.findWidgetByTemplateName(e);if(console.log(`${n.length} widgets found for template with name: ${e}`),0==n.length){console.log("Creating template:",t);const e=yield miro.board.viewport.get();yield miro.board.widgets.create({type:"TEXT",text:t.contentTemplate,metadata:{[miro.getClientId()]:t},capabilities:{editable:!1},style:{textAlign:"l"},x:e.x-200,y:e.y-200}),console.log(`template: ${t.templateName} is created successfully.`)}else{console.log("Updating template:",t);var i=n[0];i.metadata[miro.getClientId()]=t,yield miro.board.widgets.update(i),console.log(`template:${t.templateName} is updated successfully.`)}}))}findAllTemplateWidgets(){return n(this,void 0,void 0,(function*(){var e=(yield miro.board.widgets.get()).filter((e=>"STICKER"==e.type&&e.text.includes("using")));return console.log("# of widgets contain using in their text:",e.length),(yield miro.board.widgets.get()).filter((e=>e.metadata&&e.metadata["3074457349056199734"]&&e.metadata["3074457349056199734"]&&e.metadata["3074457349056199734"].templateName))}))}findWidgetByTemplateName(e){return n(this,void 0,void 0,(function*(){return(yield this.findAllTemplateWidgets()).filter((t=>t.metadata[miro.getClientId()].templateName==e))}))}getTemplateByName(e){return n(this,void 0,void 0,(function*(){var t=yield this.findWidgetByTemplateName(e);if(0==t.length)throw new Error("Widget not found for template:"+e);console.log("Widgets found:",t);var n=t[0].metadata[miro.getClientId()];return console.log("Corresponding metadata:",t[0].metadata[miro.getClientId()]),console.log("Corresponding template:",n),n}))}}function a(){return n(this,void 0,void 0,(function*(){return new i}))}function o(){return n(this,void 0,void 0,(function*(){var e=new i;yield function(e){return n(this,void 0,void 0,(function*(){const t=[{fileNameTemplate:"{{scenario}}",fileExtension:"cs",contentTemplate:'using StoryTest;\nusing Vlerx.Es.Messaging;\nusing Vlerx.Es.Persistence;\nusing Vlerx.SampleContracts.{{sut}};\nusing Vlerx.{{context}}.{{sut}};\nusing Vlerx.{{context}}.{{sut}}.Commands;\nusing Vlerx.{{context}}.Tests.StoryTests;\nusing Xunit;\n\nnamespace {{context}}.Tests\n{\n    {{#* inline "callConstructor"}}\n    new {{title}}({{#each properties}}"{{example}}"{{#skipLast}},{{/skipLast}}{{/each}}){{/inline}}\n\n    public class {{scenario}} : IStorySpecification\n    {\n        public IDomainEvent[] Given\n        => new IDomainEvent[]{\n    {{#each givens}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n        public ICommand When\n        => {{> callConstructor when}};\n        public IDomainEvent[] Then\n        => new IDomainEvent[]{\n    {{#each thens}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n\n        public string Sut { get; } = nameof({{sut}});\n\n        [Fact]\n        public void Run()\n        => TestAdapter.Test(this\n                , setupUseCases: eventStore =>\n                        new[] {\n                        new {{sut}}UseCases(new Repository<{{sut}}.State>(eventStore))\n                        });\n    }\n}',templateName:"sample-template"},{fileNameTemplate:"{{scenario}}2",fileExtension:"cs",contentTemplate:'using StoryTest;\nusing Vlerx.Es.Messaging;\nusing Vlerx.Es.Persistence;\nusing Vlerx.SampleContracts.{{sut}};\nusing Vlerx.{{context}}.{{sut}};\nusing Vlerx.{{context}}.{{sut}}.Commands;\nusing Vlerx.{{context}}.Tests.StoryTests;\nusing Xunit;\n\nnamespace {{context}}.Tests\n{\n    {{#* inline "callConstructor"}}\n    new {{title}}({{#each properties}}"{{example}}"{{#skipLast}},{{/skipLast}}{{/each}}){{/inline}}\n\n    public class {{scenario}} : IStorySpecification\n    {\n        public IDomainEvent[] Given\n        => new IDomainEvent[]{\n    {{#each givens}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n        public ICommand When\n        => {{> callConstructor when}};\n        public IDomainEvent[] Then\n        => new IDomainEvent[]{\n    {{#each thens}}\n        {{> callConstructor .}},\n    {{/each}}\n        };\n\n        public string Sut { get; } = nameof({{sut}});\n\n        [Fact]\n        public void Run()\n        => TestAdapter.Test(this\n                , setupUseCases: eventStore =>\n                        new[] {\n                        new {{sut}}UseCases(new Repository<{{sut}}.State>(eventStore))\n                        });\n    }\n}',templateName:"sample-template2"}];for(var n=0;n<t.length;n++)yield e.createOrReplaceTemplate(t[n].templateName,t[n])}))}(e)}))}})(),templateRepository=t})();